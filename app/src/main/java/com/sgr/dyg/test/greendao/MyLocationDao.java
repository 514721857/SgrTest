package com.sgr.dyg.test.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sgr.dyg.test.bean.MyLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_LOCATION".
*/
public class MyLocationDao extends AbstractDao<MyLocation, Long> {

    public static final String TABLENAME = "MY_LOCATION";

    /**
     * Properties of entity MyLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Latitude = new Property(2, Double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "Longitude", false, "LONGITUDE");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property CreateTime = new Property(5, java.util.Date.class, "CreateTime", false, "CREATE_TIME");
    }


    public MyLocationDao(DaoConfig config) {
        super(config);
    }
    
    public MyLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"LATITUDE\" REAL," + // 2: Latitude
                "\"LONGITUDE\" REAL," + // 3: Longitude
                "\"TITLE\" TEXT," + // 4: title
                "\"CREATE_TIME\" INTEGER);"); // 5: CreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        Double Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindDouble(3, Latitude);
        }
 
        Double Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindDouble(4, Longitude);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        java.util.Date CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(6, CreateTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        Double Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindDouble(3, Latitude);
        }
 
        Double Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindDouble(4, Longitude);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        java.util.Date CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(6, CreateTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyLocation readEntity(Cursor cursor, int offset) {
        MyLocation entity = new MyLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // Latitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // CreateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyLocation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyLocation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
